/*
Deployment script for TailoringService

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TailoringService"
:setvar DefaultFilePrefix "TailoringService"
:setvar DefaultDataPath "C:\Users\Carrie Chen\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\Carrie Chen\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[Bills]...';


GO
CREATE TABLE [dbo].[Bills] (
    [BillId]  INT        IDENTITY (1, 1) NOT NULL,
    [Amount]  INT        NOT NULL,
    [Payment] NCHAR (10) NOT NULL,
    [Status]  INT        NOT NULL,
    [OrderId] INT        NOT NULL,
    PRIMARY KEY CLUSTERED ([BillId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Employees]...';


GO
CREATE TABLE [dbo].[Employees] (
    [EmployeeId]   INT           IDENTITY (1, 1) NOT NULL,
    [EmployeeName] NVARCHAR (50) NOT NULL,
    [RoleType]     NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([EmployeeId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Measurements]...';


GO
CREATE TABLE [dbo].[Measurements] (
    [MeasurementId] INT        IDENTITY (1, 1) NOT NULL,
    [Gender]        NCHAR (10) NULL,
    [Bust]          FLOAT (53) NULL,
    [Neck]          FLOAT (53) NULL,
    [Waist]         FLOAT (53) NULL,
    [Hip]           FLOAT (53) NULL,
    [Shoulder]      FLOAT (53) NULL,
    [Arm]           FLOAT (53) NULL,
    [Leg]           FLOAT (53) NULL,
    [OrderId]       INT        NOT NULL,
    PRIMARY KEY CLUSTERED ([MeasurementId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Orders]...';


GO
CREATE TABLE [dbo].[Orders] (
    [OrderId]        INT           IDENTITY (1, 1) NOT NULL,
    [CustomerName]   NVARCHAR (50) NOT NULL,
    [CustomerNumber] NVARCHAR (50) NOT NULL,
    [Article]        NVARCHAR (50) NOT NULL,
    [Service]        NVARCHAR (50) NOT NULL,
    [Satus]          NVARCHAR (50) NOT NULL,
    [Comment]        NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([OrderId] ASC)
);


GO
PRINT N'Creating Table [dbo].[TailorOrders]...';


GO
CREATE TABLE [dbo].[TailorOrders] (
    [TailorId] INT NOT NULL,
    [OrderId]  INT NOT NULL,
    CONSTRAINT [PK_TailorOrders] PRIMARY KEY CLUSTERED ([OrderId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Tailors]...';


GO
CREATE TABLE [dbo].[Tailors] (
    [TailorId]   INT IDENTITY (1, 1) NOT NULL,
    [EmployeeId] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([TailorId] ASC)
);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Bills_Orders]...';


GO
ALTER TABLE [dbo].[Bills]
    ADD CONSTRAINT [FK_Bills_Orders] FOREIGN KEY ([OrderId]) REFERENCES [dbo].[Orders] ([OrderId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_Measurements_Order]...';


GO
ALTER TABLE [dbo].[Measurements]
    ADD CONSTRAINT [FK_Measurements_Order] FOREIGN KEY ([OrderId]) REFERENCES [dbo].[Orders] ([OrderId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[PK_TailorOrders_Tailors]...';


GO
ALTER TABLE [dbo].[TailorOrders]
    ADD CONSTRAINT [PK_TailorOrders_Tailors] FOREIGN KEY ([TailorId]) REFERENCES [dbo].[Tailors] ([TailorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_TailorOrders_Orders]...';


GO
ALTER TABLE [dbo].[TailorOrders]
    ADD CONSTRAINT [FK_TailorOrders_Orders] FOREIGN KEY ([OrderId]) REFERENCES [dbo].[Orders] ([OrderId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_Tailors_Employees]...';


GO
ALTER TABLE [dbo].[Tailors]
    ADD CONSTRAINT [FK_Tailors_Employees] FOREIGN KEY ([EmployeeId]) REFERENCES [dbo].[Employees] ([EmployeeId]);


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'cbe804a7-73a9-4edf-8aed-4ce4564b6a48')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('cbe804a7-73a9-4edf-8aed-4ce4564b6a48')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b42d2958-2709-47d4-aca1-dbb3d71aded0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b42d2958-2709-47d4-aca1-dbb3d71aded0')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '85735e37-dfe4-4c6a-b896-c800ce989f01')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('85735e37-dfe4-4c6a-b896-c800ce989f01')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '661b8f75-8c0c-4935-840a-f5fb030e37f0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('661b8f75-8c0c-4935-840a-f5fb030e37f0')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'dcbeef18-9ea0-4051-bad1-e665199d40df')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('dcbeef18-9ea0-4051-bad1-e665199d40df')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd67fd7f6-4b81-49bd-900d-b6b924aa7d6a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d67fd7f6-4b81-49bd-900d-b6b924aa7d6a')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
SET IDENTITY_INSERT [dbo].[Employees] ON
INSERT INTO [dbo].[Employees] ([EmployeeId], [EmployeeName], [RoleType]) VALUES (1, N'Jing', N'manager')
INSERT INTO [dbo].[Employees] ([EmployeeId], [EmployeeName], [RoleType]) VALUES (2, N'Carrie', N'tailor')
INSERT INTO [dbo].[Employees] ([EmployeeId], [EmployeeName], [RoleType]) VALUES (3, N'Gerard', N'tailor')
INSERT INTO [dbo].[Employees] ([EmployeeId], [EmployeeName], [RoleType]) VALUES (4, N'John', N'reciptionist')
SET IDENTITY_INSERT [dbo].[Employees] OFF
GO

SET IDENTITY_INSERT [dbo].[Tailors] ON
INSERT INTO [dbo].[Tailors] ([TailorId], [EmployeeId]) VALUES (1, 2)
INSERT INTO [dbo].[Tailors] ([TailorId], [EmployeeId]) VALUES (2, 3)
SET IDENTITY_INSERT [dbo].[Tailors] OFF
GO


SET IDENTITY_INSERT [dbo].[Orders] ON
INSERT INTO [dbo].[Orders] ([OrderId], [CustomerName], [CustomerNumber], [Article], [Service], [Satus], [Comment]) VALUES (1, N'John', N'7767787678', N'T-shirt', N'repair', N'new', N'no comments')
INSERT INTO [dbo].[Orders] ([OrderId], [CustomerName], [CustomerNumber], [Article], [Service], [Satus], [Comment]) VALUES (2, N'Gerard', N'776755555', N'pant', N'alteration', N'new', N'no comments')
INSERT INTO [dbo].[Orders] ([OrderId], [CustomerName], [CustomerNumber], [Article], [Service], [Satus], [Comment]) VALUES (3, N'Carrie', N'776766666', N'hoodie', N'new clothing', N'new', N'no comments')

SET IDENTITY_INSERT [dbo].[Orders] OFF
GO


SET IDENTITY_INSERT [dbo].[Bills] ON
INSERT INTO [dbo].[Bills] ([BillId], [Amount], [Payment], [Status], [OrderId]) VALUES (1, 20, N'Cash', 0, 1)
INSERT INTO [dbo].[Bills] ([BillId], [Amount], [Payment], [Status], [OrderId]) VALUES (2, 50, N'Credit', 0, 2)
INSERT INTO [dbo].[Bills] ([BillId], [Amount], [Payment], [Status], [OrderId]) VALUES (3, 200, N'ApplePay', 0, 3)

SET IDENTITY_INSERT [dbo].[Bills] OFF
GO

SET IDENTITY_INSERT [dbo].[Measurements] ON
INSERT INTO [dbo].[Measurements] ([MeasurementId], [Gender], [Bust], [Neck], [Waist], [Hip], [Shoulder], [Arm], [Leg], [OrderId]) VALUES (1, 'female',  18.5, 18.5, 18.5, 18.5, 18.5, 18.5, 18.5, 1)
INSERT INTO [dbo].[Measurements] ([MeasurementId], [Gender], [Bust], [Neck], [Waist], [Hip], [Shoulder], [Arm], [Leg], [OrderId]) VALUES (2, 'female',  28.5, 28.5, 18.5, 28.5, 28.5, 28.5, 28.5, 2)
INSERT INTO [dbo].[Measurements] ([MeasurementId], [Gender], [Bust], [Neck], [Waist], [Hip], [Shoulder], [Arm], [Leg], [OrderId]) VALUES (3, 'female',  38.5, 38.5, 38.5, 38.5, 38.5, 38.5, 38.5, 3)

SET IDENTITY_INSERT [dbo].[Measurements] OFF
GO

SET IDENTITY_INSERT [dbo].[TailorOrders] ON
INSERT INTO [dbo].[TailorOrders] ([TailorId], [OrderId]) VALUES (1, 1)
INSERT INTO [dbo].[TailorOrders] ([TailorId], [OrderId]) VALUES (2, 2)
INSERT INTO [dbo].[TailorOrders] ([TailorId], [OrderId]) VALUES (2, 3)
SET IDENTITY_INSERT [dbo].[TailorOrders] OFF
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
